-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul_matrixmul_Pipeline_Row_r_Col_r is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    b_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    r_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_we0 : OUT STD_LOGIC;
    r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_reload25 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_reload22 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_reload19 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_reload : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of matrixmul_matrixmul_Pipeline_Row_r_Col_r is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln81_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln83_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_reg_362 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_reg_362_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_372 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_377 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln83_4_reg_382 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln83_fu_331_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln83_reg_387 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_fu_70 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln82_fu_283_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_74 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln81_1_fu_188_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten34_fu_78 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln81_1_fu_156_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_indvar_flatten34_load : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln82_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln81_fu_168_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln83_fu_200_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln81_fu_180_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln83_fu_206_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln83_1_fu_217_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln83_fu_196_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_1_fu_221_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_fu_229_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_3_fu_237_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln83_fu_245_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln83_fu_257_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln83_1_fu_304_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln83_1_fu_313_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln83_1_fu_307_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln83_2_fu_316_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln83_2_fu_320_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_mul_8s_6s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component matrixmul_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8s_6s_8_1_1_U9 : component matrixmul_mul_8s_6s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => b_q0,
        din1 => select_ln83_2_fu_320_p3,
        dout => mul_ln83_fu_331_p2);

    flow_control_loop_pipe_sequential_init_U : component matrixmul_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln81_fu_150_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_74 <= select_ln81_1_fu_188_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_74 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten34_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln81_fu_150_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten34_fu_78 <= add_ln81_1_fu_156_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten34_fu_78 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln81_fu_150_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_70 <= add_ln82_fu_283_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_70 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                mul_ln83_reg_387 <= mul_ln83_fu_331_p2;
                    zext_ln83_reg_362_pp0_iter1_reg(1 downto 0) <= zext_ln83_reg_362(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_150_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_5_reg_377 <= sub_ln83_fu_257_p2(8 downto 4);
                tmp_reg_372 <= select_ln83_3_fu_237_p3(7 downto 7);
                trunc_ln83_4_reg_382 <= select_ln83_3_fu_237_p3(7 downto 4);
                    zext_ln83_reg_362(1 downto 0) <= zext_ln83_fu_212_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln83_reg_362(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln83_reg_362_pp0_iter1_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln81_1_fu_156_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten34_load) + unsigned(ap_const_lv3_1));
    add_ln81_fu_168_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv2_1));
    add_ln82_fu_283_p2 <= std_logic_vector(unsigned(select_ln81_fu_180_p3) + unsigned(ap_const_lv2_1));
    add_ln83_fu_206_p2 <= std_logic_vector(unsigned(shl_ln83_fu_200_p2) + unsigned(select_ln81_fu_180_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln81_fu_150_p2)
    begin
        if (((icmp_ln81_fu_150_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten34_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten34_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten34_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_indvar_flatten34_load <= indvar_flatten34_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_70, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_70;
        end if; 
    end process;

    b_address0 <= zext_ln83_fu_212_p1(2 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln81_fu_150_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten34_load = ap_const_lv3_4) else "0";
    icmp_ln82_fu_174_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv2_2) else "0";
    r_address0 <= zext_ln83_reg_362_pp0_iter1_reg(2 - 1 downto 0);

    r_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_d0 <= mul_ln83_reg_387;

    r_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            r_we0 <= ap_const_logic_1;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln81_1_fu_188_p3 <= 
        add_ln81_fu_168_p2 when (icmp_ln82_fu_174_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln81_fu_180_p3 <= 
        ap_const_lv2_0 when (icmp_ln82_fu_174_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln83_1_fu_221_p3 <= 
        p_reload25 when (trunc_ln83_1_fu_217_p1(0) = '1') else 
        p_reload22;
    select_ln83_2_fu_320_p3 <= 
        sub_ln83_1_fu_307_p2 when (tmp_reg_372(0) = '1') else 
        zext_ln83_2_fu_316_p1;
    select_ln83_3_fu_237_p3 <= 
        select_ln83_1_fu_221_p3 when (trunc_ln83_fu_196_p1(0) = '1') else 
        select_ln83_fu_229_p3;
    select_ln83_fu_229_p3 <= 
        p_reload19 when (trunc_ln83_1_fu_217_p1(0) = '1') else 
        p_reload;
        sext_ln83_1_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln83_4_reg_382),5));

        sext_ln83_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln83_3_fu_237_p3),9));

    shl_ln83_fu_200_p2 <= std_logic_vector(shift_left(unsigned(select_ln81_1_fu_188_p3),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    sub_ln83_1_fu_307_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln83_1_fu_304_p1));
    sub_ln83_fu_257_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sext_ln83_fu_245_p1));
    trunc_ln83_1_fu_217_p1 <= select_ln81_fu_180_p3(1 - 1 downto 0);
    trunc_ln83_fu_196_p1 <= select_ln81_1_fu_188_p3(1 - 1 downto 0);
    zext_ln83_1_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_377),6));
    zext_ln83_2_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln83_1_fu_313_p1),6));
    zext_ln83_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_fu_206_p2),64));
end behav;
