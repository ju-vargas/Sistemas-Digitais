// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matrixmul_matrixmul_Pipeline_Row_r_Col_r (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_address0,
        b_ce0,
        b_q0,
        r_address0,
        r_ce0,
        r_we0,
        r_d0,
        p_reload25,
        p_reload22,
        p_reload19,
        p_reload
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [1:0] r_address0;
output   r_ce0;
output   r_we0;
output  [7:0] r_d0;
input  [7:0] p_reload25;
input  [7:0] p_reload22;
input  [7:0] p_reload19;
input  [7:0] p_reload;

reg ap_idle;
reg b_ce0;
reg r_ce0;
reg r_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln81_fu_150_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln83_fu_212_p1;
reg   [63:0] zext_ln83_reg_362;
reg   [63:0] zext_ln83_reg_362_pp0_iter1_reg;
reg   [0:0] tmp_reg_372;
reg   [4:0] tmp_5_reg_377;
reg   [3:0] trunc_ln83_4_reg_382;
wire   [7:0] mul_ln83_fu_331_p2;
reg   [7:0] mul_ln83_reg_387;
wire    ap_block_pp0_stage0;
reg   [1:0] j_fu_70;
wire   [1:0] add_ln82_fu_283_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_j_load;
reg   [1:0] i_fu_74;
wire   [1:0] select_ln81_1_fu_188_p3;
reg   [1:0] ap_sig_allocacmp_i_load;
reg   [2:0] indvar_flatten34_fu_78;
wire   [2:0] add_ln81_1_fu_156_p2;
reg   [2:0] ap_sig_allocacmp_indvar_flatten34_load;
wire   [0:0] icmp_ln82_fu_174_p2;
wire   [1:0] add_ln81_fu_168_p2;
wire   [1:0] shl_ln83_fu_200_p2;
wire   [1:0] select_ln81_fu_180_p3;
wire   [1:0] add_ln83_fu_206_p2;
wire   [0:0] trunc_ln83_1_fu_217_p1;
wire   [0:0] trunc_ln83_fu_196_p1;
wire   [7:0] select_ln83_1_fu_221_p3;
wire   [7:0] select_ln83_fu_229_p3;
wire  signed [7:0] select_ln83_3_fu_237_p3;
wire  signed [8:0] sext_ln83_fu_245_p1;
wire   [8:0] sub_ln83_fu_257_p2;
wire   [5:0] zext_ln83_1_fu_304_p1;
wire  signed [4:0] sext_ln83_1_fu_313_p1;
wire   [5:0] sub_ln83_1_fu_307_p2;
wire   [5:0] zext_ln83_2_fu_316_p1;
wire  signed [5:0] select_ln83_2_fu_320_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

matrixmul_mul_8s_6s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
mul_8s_6s_8_1_1_U9(
    .din0(b_q0),
    .din1(select_ln83_2_fu_320_p3),
    .dout(mul_ln83_fu_331_p2)
);

matrixmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln81_fu_150_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_74 <= select_ln81_1_fu_188_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_74 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln81_fu_150_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten34_fu_78 <= add_ln81_1_fu_156_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_78 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln81_fu_150_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_70 <= add_ln82_fu_283_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_70 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        mul_ln83_reg_387 <= mul_ln83_fu_331_p2;
        zext_ln83_reg_362_pp0_iter1_reg[1 : 0] <= zext_ln83_reg_362[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln81_fu_150_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_5_reg_377 <= {{sub_ln83_fu_257_p2[8:4]}};
        tmp_reg_372 <= select_ln83_3_fu_237_p3[32'd7];
        trunc_ln83_4_reg_382 <= {{select_ln83_3_fu_237_p3[7:4]}};
        zext_ln83_reg_362[1 : 0] <= zext_ln83_fu_212_p1[1 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln81_fu_150_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 2'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten34_load = 3'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten34_load = indvar_flatten34_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 2'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_ce0 = 1'b1;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_we0 = 1'b1;
    end else begin
        r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln81_1_fu_156_p2 = (ap_sig_allocacmp_indvar_flatten34_load + 3'd1);

assign add_ln81_fu_168_p2 = (ap_sig_allocacmp_i_load + 2'd1);

assign add_ln82_fu_283_p2 = (select_ln81_fu_180_p3 + 2'd1);

assign add_ln83_fu_206_p2 = (shl_ln83_fu_200_p2 + select_ln81_fu_180_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign b_address0 = zext_ln83_fu_212_p1;

assign icmp_ln81_fu_150_p2 = ((ap_sig_allocacmp_indvar_flatten34_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_174_p2 = ((ap_sig_allocacmp_j_load == 2'd2) ? 1'b1 : 1'b0);

assign r_address0 = zext_ln83_reg_362_pp0_iter1_reg;

assign r_d0 = mul_ln83_reg_387;

assign select_ln81_1_fu_188_p3 = ((icmp_ln82_fu_174_p2[0:0] == 1'b1) ? add_ln81_fu_168_p2 : ap_sig_allocacmp_i_load);

assign select_ln81_fu_180_p3 = ((icmp_ln82_fu_174_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_j_load);

assign select_ln83_1_fu_221_p3 = ((trunc_ln83_1_fu_217_p1[0:0] == 1'b1) ? p_reload25 : p_reload22);

assign select_ln83_2_fu_320_p3 = ((tmp_reg_372[0:0] == 1'b1) ? sub_ln83_1_fu_307_p2 : zext_ln83_2_fu_316_p1);

assign select_ln83_3_fu_237_p3 = ((trunc_ln83_fu_196_p1[0:0] == 1'b1) ? select_ln83_1_fu_221_p3 : select_ln83_fu_229_p3);

assign select_ln83_fu_229_p3 = ((trunc_ln83_1_fu_217_p1[0:0] == 1'b1) ? p_reload19 : p_reload);

assign sext_ln83_1_fu_313_p1 = $signed(trunc_ln83_4_reg_382);

assign sext_ln83_fu_245_p1 = select_ln83_3_fu_237_p3;

assign shl_ln83_fu_200_p2 = select_ln81_1_fu_188_p3 << 2'd1;

assign sub_ln83_1_fu_307_p2 = (6'd0 - zext_ln83_1_fu_304_p1);

assign sub_ln83_fu_257_p2 = ($signed(9'd0) - $signed(sext_ln83_fu_245_p1));

assign trunc_ln83_1_fu_217_p1 = select_ln81_fu_180_p3[0:0];

assign trunc_ln83_fu_196_p1 = select_ln81_1_fu_188_p3[0:0];

assign zext_ln83_1_fu_304_p1 = tmp_5_reg_377;

assign zext_ln83_2_fu_316_p1 = $unsigned(sext_ln83_1_fu_313_p1);

assign zext_ln83_fu_212_p1 = add_ln83_fu_206_p2;

always @ (posedge ap_clk) begin
    zext_ln83_reg_362[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln83_reg_362_pp0_iter1_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //matrixmul_matrixmul_Pipeline_Row_r_Col_r
