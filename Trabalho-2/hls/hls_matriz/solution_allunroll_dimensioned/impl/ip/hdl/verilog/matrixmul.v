// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-csg325-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.900500,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=172,HLS_SYN_LUT=953,HLS_VERSION=2023_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_0,
        a_0_1,
        a_0_2,
        a_0_3,
        a_0_4,
        a_0_5,
        a_0_6,
        a_0_7,
        a_1_0,
        a_1_1,
        a_1_2,
        a_1_3,
        a_1_4,
        a_1_5,
        a_1_6,
        a_1_7,
        a_2_0,
        a_2_1,
        a_2_2,
        a_2_3,
        a_2_4,
        a_2_5,
        a_2_6,
        a_2_7,
        a_3_0,
        a_3_1,
        a_3_2,
        a_3_3,
        a_3_4,
        a_3_5,
        a_3_6,
        a_3_7,
        a_4_0,
        a_4_1,
        a_4_2,
        a_4_3,
        a_4_4,
        a_4_5,
        a_4_6,
        a_4_7,
        a_5_0,
        a_5_1,
        a_5_2,
        a_5_3,
        a_5_4,
        a_5_5,
        a_5_6,
        a_5_7,
        a_6_0,
        a_6_1,
        a_6_2,
        a_6_3,
        a_6_4,
        a_6_5,
        a_6_6,
        a_6_7,
        a_7_0,
        a_7_1,
        a_7_2,
        a_7_3,
        a_7_4,
        a_7_5,
        a_7_6,
        a_7_7,
        b_0_0,
        b_0_1,
        b_1_0,
        b_1_1,
        r_0_0,
        r_0_0_ap_vld,
        r_0_1,
        r_0_1_ap_vld,
        r_1_0,
        r_1_0_ap_vld,
        r_1_1,
        r_1_1_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] a_0_0;
input  [7:0] a_0_1;
input  [7:0] a_0_2;
input  [7:0] a_0_3;
input  [7:0] a_0_4;
input  [7:0] a_0_5;
input  [7:0] a_0_6;
input  [7:0] a_0_7;
input  [7:0] a_1_0;
input  [7:0] a_1_1;
input  [7:0] a_1_2;
input  [7:0] a_1_3;
input  [7:0] a_1_4;
input  [7:0] a_1_5;
input  [7:0] a_1_6;
input  [7:0] a_1_7;
input  [7:0] a_2_0;
input  [7:0] a_2_1;
input  [7:0] a_2_2;
input  [7:0] a_2_3;
input  [7:0] a_2_4;
input  [7:0] a_2_5;
input  [7:0] a_2_6;
input  [7:0] a_2_7;
input  [7:0] a_3_0;
input  [7:0] a_3_1;
input  [7:0] a_3_2;
input  [7:0] a_3_3;
input  [7:0] a_3_4;
input  [7:0] a_3_5;
input  [7:0] a_3_6;
input  [7:0] a_3_7;
input  [7:0] a_4_0;
input  [7:0] a_4_1;
input  [7:0] a_4_2;
input  [7:0] a_4_3;
input  [7:0] a_4_4;
input  [7:0] a_4_5;
input  [7:0] a_4_6;
input  [7:0] a_4_7;
input  [7:0] a_5_0;
input  [7:0] a_5_1;
input  [7:0] a_5_2;
input  [7:0] a_5_3;
input  [7:0] a_5_4;
input  [7:0] a_5_5;
input  [7:0] a_5_6;
input  [7:0] a_5_7;
input  [7:0] a_6_0;
input  [7:0] a_6_1;
input  [7:0] a_6_2;
input  [7:0] a_6_3;
input  [7:0] a_6_4;
input  [7:0] a_6_5;
input  [7:0] a_6_6;
input  [7:0] a_6_7;
input  [7:0] a_7_0;
input  [7:0] a_7_1;
input  [7:0] a_7_2;
input  [7:0] a_7_3;
input  [7:0] a_7_4;
input  [7:0] a_7_5;
input  [7:0] a_7_6;
input  [7:0] a_7_7;
input  [7:0] b_0_0;
input  [7:0] b_0_1;
input  [7:0] b_1_0;
input  [7:0] b_1_1;
output  [7:0] r_0_0;
output   r_0_0_ap_vld;
output  [7:0] r_0_1;
output   r_0_1_ap_vld;
output  [7:0] r_1_0;
output   r_1_0_ap_vld;
output  [7:0] r_1_1;
output   r_1_1_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_0_0_ap_vld;
reg r_0_1_ap_vld;
reg r_1_0_ap_vld;
reg r_1_1_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] add_ln59_12_fu_628_p2;
reg   [7:0] add_ln59_12_reg_1248;
wire   [7:0] add_ln65_12_fu_646_p2;
reg   [7:0] add_ln65_12_reg_1253;
wire   [7:0] add_ln71_12_fu_664_p2;
reg   [7:0] add_ln71_12_reg_1258;
wire   [7:0] add_ln77_12_fu_682_p2;
reg   [7:0] add_ln77_12_reg_1263;
wire   [7:0] add_ln59_2_fu_700_p2;
reg   [7:0] add_ln59_2_reg_1268;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln59_5_fu_718_p2;
reg   [7:0] add_ln59_5_reg_1273;
wire   [7:0] add_ln59_13_fu_742_p2;
reg   [7:0] add_ln59_13_reg_1278;
wire   [7:0] add_ln65_2_fu_759_p2;
reg   [7:0] add_ln65_2_reg_1283;
wire   [7:0] add_ln65_5_fu_777_p2;
reg   [7:0] add_ln65_5_reg_1288;
wire   [7:0] add_ln65_13_fu_801_p2;
reg   [7:0] add_ln65_13_reg_1293;
wire   [7:0] add_ln71_2_fu_818_p2;
reg   [7:0] add_ln71_2_reg_1298;
wire   [7:0] add_ln71_5_fu_836_p2;
reg   [7:0] add_ln71_5_reg_1303;
wire   [7:0] add_ln71_13_fu_860_p2;
reg   [7:0] add_ln71_13_reg_1308;
wire   [7:0] add_ln77_2_fu_877_p2;
reg   [7:0] add_ln77_2_reg_1313;
wire   [7:0] add_ln77_5_fu_895_p2;
reg   [7:0] add_ln77_5_reg_1318;
wire   [7:0] add_ln77_13_fu_919_p2;
reg   [7:0] add_ln77_13_reg_1323;
reg   [0:0] tmp_4_reg_1328;
wire    ap_CS_fsm_state3;
reg   [4:0] tmp_reg_1333;
reg   [3:0] trunc_ln83_2_reg_1338;
reg   [0:0] tmp_5_reg_1343;
reg   [4:0] tmp_1_reg_1348;
reg   [3:0] trunc_ln83_5_reg_1353;
reg   [0:0] tmp_6_reg_1358;
reg   [4:0] tmp_2_reg_1363;
reg   [3:0] trunc_ln83_8_reg_1368;
reg   [0:0] tmp_7_reg_1373;
reg   [4:0] tmp_3_reg_1378;
reg   [3:0] trunc_ln83_s_reg_1383;
wire    ap_CS_fsm_state4;
wire   [7:0] mul_ln83_fu_1139_p2;
wire   [7:0] mul_ln83_1_fu_1227_p2;
wire   [7:0] mul_ln83_2_fu_1234_p2;
wire   [7:0] mul_ln83_3_fu_1241_p2;
wire   [7:0] add_ln59_11_fu_622_p2;
wire   [7:0] add_ln59_10_fu_616_p2;
wire   [7:0] add_ln65_11_fu_640_p2;
wire   [7:0] add_ln65_10_fu_634_p2;
wire   [7:0] add_ln71_11_fu_658_p2;
wire   [7:0] add_ln71_10_fu_652_p2;
wire   [7:0] add_ln77_11_fu_676_p2;
wire   [7:0] add_ln77_10_fu_670_p2;
wire   [7:0] add_ln59_1_fu_694_p2;
wire   [7:0] add_ln59_fu_688_p2;
wire   [7:0] add_ln59_4_fu_712_p2;
wire   [7:0] add_ln59_3_fu_706_p2;
wire   [7:0] add_ln59_8_fu_730_p2;
wire   [7:0] add_ln59_7_fu_724_p2;
wire   [7:0] add_ln59_9_fu_736_p2;
wire   [7:0] add_ln65_1_fu_753_p2;
wire   [7:0] add_ln65_fu_747_p2;
wire   [7:0] add_ln65_4_fu_771_p2;
wire   [7:0] add_ln65_3_fu_765_p2;
wire   [7:0] add_ln65_8_fu_789_p2;
wire   [7:0] add_ln65_7_fu_783_p2;
wire   [7:0] add_ln65_9_fu_795_p2;
wire   [7:0] add_ln71_1_fu_812_p2;
wire   [7:0] add_ln71_fu_806_p2;
wire   [7:0] add_ln71_4_fu_830_p2;
wire   [7:0] add_ln71_3_fu_824_p2;
wire   [7:0] add_ln71_8_fu_848_p2;
wire   [7:0] add_ln71_7_fu_842_p2;
wire   [7:0] add_ln71_9_fu_854_p2;
wire   [7:0] add_ln77_1_fu_871_p2;
wire   [7:0] add_ln77_fu_865_p2;
wire   [7:0] add_ln77_4_fu_889_p2;
wire   [7:0] add_ln77_3_fu_883_p2;
wire   [7:0] add_ln77_8_fu_907_p2;
wire   [7:0] add_ln77_7_fu_901_p2;
wire   [7:0] add_ln77_9_fu_913_p2;
wire   [7:0] add_ln59_6_fu_924_p2;
wire   [7:0] add_ln65_6_fu_933_p2;
wire   [7:0] add_ln71_6_fu_942_p2;
wire   [7:0] add_ln77_6_fu_951_p2;
wire  signed [7:0] sum_0_0_fu_928_p2;
wire  signed [8:0] sext_ln83_fu_960_p1;
wire   [8:0] sub_ln83_fu_972_p2;
wire  signed [7:0] sum_0_1_fu_937_p2;
wire  signed [8:0] sext_ln83_2_fu_998_p1;
wire   [8:0] sub_ln83_2_fu_1010_p2;
wire  signed [7:0] sum_1_0_fu_946_p2;
wire  signed [8:0] sext_ln83_4_fu_1036_p1;
wire   [8:0] sub_ln83_4_fu_1048_p2;
wire  signed [7:0] add_ln77_14_fu_955_p2;
wire  signed [8:0] sext_ln83_6_fu_1074_p1;
wire   [8:0] sub_ln83_6_fu_1086_p2;
wire   [5:0] zext_ln83_fu_1112_p1;
wire  signed [4:0] sext_ln83_1_fu_1121_p1;
wire   [5:0] sub_ln83_1_fu_1115_p2;
wire   [5:0] zext_ln83_1_fu_1124_p1;
wire  signed [5:0] select_ln83_fu_1128_p3;
wire   [5:0] zext_ln83_2_fu_1146_p1;
wire  signed [4:0] sext_ln83_5_fu_1155_p1;
wire   [5:0] sub_ln83_3_fu_1149_p2;
wire   [5:0] zext_ln83_3_fu_1158_p1;
wire  signed [5:0] select_ln83_1_fu_1162_p3;
wire   [5:0] zext_ln83_4_fu_1173_p1;
wire  signed [4:0] sext_ln83_8_fu_1182_p1;
wire   [5:0] sub_ln83_5_fu_1176_p2;
wire   [5:0] zext_ln83_5_fu_1185_p1;
wire  signed [5:0] select_ln83_2_fu_1189_p3;
wire   [5:0] zext_ln83_6_fu_1200_p1;
wire  signed [4:0] sext_ln83_10_fu_1209_p1;
wire   [5:0] sub_ln83_7_fu_1203_p2;
wire   [5:0] zext_ln83_7_fu_1212_p1;
wire  signed [5:0] select_ln83_3_fu_1216_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

matrixmul_mul_8s_6s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
mul_8s_6s_8_1_1_U1(
    .din0(b_0_0),
    .din1(select_ln83_fu_1128_p3),
    .dout(mul_ln83_fu_1139_p2)
);

matrixmul_mul_8s_6s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
mul_8s_6s_8_1_1_U2(
    .din0(b_0_1),
    .din1(select_ln83_1_fu_1162_p3),
    .dout(mul_ln83_1_fu_1227_p2)
);

matrixmul_mul_8s_6s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
mul_8s_6s_8_1_1_U3(
    .din0(b_1_0),
    .din1(select_ln83_2_fu_1189_p3),
    .dout(mul_ln83_2_fu_1234_p2)
);

matrixmul_mul_8s_6s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
mul_8s_6s_8_1_1_U4(
    .din0(b_1_1),
    .din1(select_ln83_3_fu_1216_p3),
    .dout(mul_ln83_3_fu_1241_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln59_12_reg_1248 <= add_ln59_12_fu_628_p2;
        add_ln65_12_reg_1253 <= add_ln65_12_fu_646_p2;
        add_ln71_12_reg_1258 <= add_ln71_12_fu_664_p2;
        add_ln77_12_reg_1263 <= add_ln77_12_fu_682_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln59_13_reg_1278 <= add_ln59_13_fu_742_p2;
        add_ln59_2_reg_1268 <= add_ln59_2_fu_700_p2;
        add_ln59_5_reg_1273 <= add_ln59_5_fu_718_p2;
        add_ln65_13_reg_1293 <= add_ln65_13_fu_801_p2;
        add_ln65_2_reg_1283 <= add_ln65_2_fu_759_p2;
        add_ln65_5_reg_1288 <= add_ln65_5_fu_777_p2;
        add_ln71_13_reg_1308 <= add_ln71_13_fu_860_p2;
        add_ln71_2_reg_1298 <= add_ln71_2_fu_818_p2;
        add_ln71_5_reg_1303 <= add_ln71_5_fu_836_p2;
        add_ln77_13_reg_1323 <= add_ln77_13_fu_919_p2;
        add_ln77_2_reg_1313 <= add_ln77_2_fu_877_p2;
        add_ln77_5_reg_1318 <= add_ln77_5_fu_895_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_1_reg_1348 <= {{sub_ln83_2_fu_1010_p2[8:4]}};
        tmp_2_reg_1363 <= {{sub_ln83_4_fu_1048_p2[8:4]}};
        tmp_3_reg_1378 <= {{sub_ln83_6_fu_1086_p2[8:4]}};
        tmp_4_reg_1328 <= sum_0_0_fu_928_p2[32'd7];
        tmp_5_reg_1343 <= sum_0_1_fu_937_p2[32'd7];
        tmp_6_reg_1358 <= sum_1_0_fu_946_p2[32'd7];
        tmp_7_reg_1373 <= add_ln77_14_fu_955_p2[32'd7];
        tmp_reg_1333 <= {{sub_ln83_fu_972_p2[8:4]}};
        trunc_ln83_2_reg_1338 <= {{sum_0_0_fu_928_p2[7:4]}};
        trunc_ln83_5_reg_1353 <= {{sum_0_1_fu_937_p2[7:4]}};
        trunc_ln83_8_reg_1368 <= {{sum_1_0_fu_946_p2[7:4]}};
        trunc_ln83_s_reg_1383 <= {{add_ln77_14_fu_955_p2[7:4]}};
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_0_0_ap_vld = 1'b1;
    end else begin
        r_0_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_0_1_ap_vld = 1'b1;
    end else begin
        r_0_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_1_0_ap_vld = 1'b1;
    end else begin
        r_1_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_1_1_ap_vld = 1'b1;
    end else begin
        r_1_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln59_10_fu_616_p2 = (a_1_0 + a_1_3);

assign add_ln59_11_fu_622_p2 = (a_3_3 + a_1_2);

assign add_ln59_12_fu_628_p2 = (add_ln59_11_fu_622_p2 + add_ln59_10_fu_616_p2);

assign add_ln59_13_fu_742_p2 = (add_ln59_12_reg_1248 + add_ln59_9_fu_736_p2);

assign add_ln59_1_fu_694_p2 = (a_3_0 + a_2_1);

assign add_ln59_2_fu_700_p2 = (add_ln59_1_fu_694_p2 + add_ln59_fu_688_p2);

assign add_ln59_3_fu_706_p2 = (a_2_0 + a_2_3);

assign add_ln59_4_fu_712_p2 = (a_2_2 + a_0_1);

assign add_ln59_5_fu_718_p2 = (add_ln59_4_fu_712_p2 + add_ln59_3_fu_706_p2);

assign add_ln59_6_fu_924_p2 = (add_ln59_5_reg_1273 + add_ln59_2_reg_1268);

assign add_ln59_7_fu_724_p2 = (a_0_0 + a_0_3);

assign add_ln59_8_fu_730_p2 = (a_0_2 + a_1_1);

assign add_ln59_9_fu_736_p2 = (add_ln59_8_fu_730_p2 + add_ln59_7_fu_724_p2);

assign add_ln59_fu_688_p2 = (a_3_2 + a_3_1);

assign add_ln65_10_fu_634_p2 = (a_1_4 + a_1_7);

assign add_ln65_11_fu_640_p2 = (a_3_7 + a_1_6);

assign add_ln65_12_fu_646_p2 = (add_ln65_11_fu_640_p2 + add_ln65_10_fu_634_p2);

assign add_ln65_13_fu_801_p2 = (add_ln65_12_reg_1253 + add_ln65_9_fu_795_p2);

assign add_ln65_1_fu_753_p2 = (a_3_4 + a_2_5);

assign add_ln65_2_fu_759_p2 = (add_ln65_1_fu_753_p2 + add_ln65_fu_747_p2);

assign add_ln65_3_fu_765_p2 = (a_2_4 + a_2_7);

assign add_ln65_4_fu_771_p2 = (a_2_6 + a_0_5);

assign add_ln65_5_fu_777_p2 = (add_ln65_4_fu_771_p2 + add_ln65_3_fu_765_p2);

assign add_ln65_6_fu_933_p2 = (add_ln65_5_reg_1288 + add_ln65_2_reg_1283);

assign add_ln65_7_fu_783_p2 = (a_0_4 + a_0_7);

assign add_ln65_8_fu_789_p2 = (a_0_6 + a_1_5);

assign add_ln65_9_fu_795_p2 = (add_ln65_8_fu_789_p2 + add_ln65_7_fu_783_p2);

assign add_ln65_fu_747_p2 = (a_3_6 + a_3_5);

assign add_ln71_10_fu_652_p2 = (a_5_0 + a_5_3);

assign add_ln71_11_fu_658_p2 = (a_7_3 + a_5_2);

assign add_ln71_12_fu_664_p2 = (add_ln71_11_fu_658_p2 + add_ln71_10_fu_652_p2);

assign add_ln71_13_fu_860_p2 = (add_ln71_12_reg_1258 + add_ln71_9_fu_854_p2);

assign add_ln71_1_fu_812_p2 = (a_7_0 + a_6_1);

assign add_ln71_2_fu_818_p2 = (add_ln71_1_fu_812_p2 + add_ln71_fu_806_p2);

assign add_ln71_3_fu_824_p2 = (a_6_0 + a_6_3);

assign add_ln71_4_fu_830_p2 = (a_6_2 + a_4_1);

assign add_ln71_5_fu_836_p2 = (add_ln71_4_fu_830_p2 + add_ln71_3_fu_824_p2);

assign add_ln71_6_fu_942_p2 = (add_ln71_5_reg_1303 + add_ln71_2_reg_1298);

assign add_ln71_7_fu_842_p2 = (a_4_0 + a_4_3);

assign add_ln71_8_fu_848_p2 = (a_4_2 + a_5_1);

assign add_ln71_9_fu_854_p2 = (add_ln71_8_fu_848_p2 + add_ln71_7_fu_842_p2);

assign add_ln71_fu_806_p2 = (a_7_2 + a_7_1);

assign add_ln77_10_fu_670_p2 = (a_4_7 + a_5_6);

assign add_ln77_11_fu_676_p2 = (a_5_5 + a_7_7);

assign add_ln77_12_fu_682_p2 = (add_ln77_11_fu_676_p2 + add_ln77_10_fu_670_p2);

assign add_ln77_13_fu_919_p2 = (add_ln77_12_reg_1263 + add_ln77_9_fu_913_p2);

assign add_ln77_14_fu_955_p2 = (add_ln77_13_reg_1323 + add_ln77_6_fu_951_p2);

assign add_ln77_1_fu_871_p2 = (a_7_4 + a_6_7);

assign add_ln77_2_fu_877_p2 = (add_ln77_1_fu_871_p2 + add_ln77_fu_865_p2);

assign add_ln77_3_fu_883_p2 = (a_6_4 + a_5_7);

assign add_ln77_4_fu_889_p2 = (a_6_6 + a_6_5);

assign add_ln77_5_fu_895_p2 = (add_ln77_4_fu_889_p2 + add_ln77_3_fu_883_p2);

assign add_ln77_6_fu_951_p2 = (add_ln77_5_reg_1318 + add_ln77_2_reg_1313);

assign add_ln77_7_fu_901_p2 = (a_4_4 + a_4_6);

assign add_ln77_8_fu_907_p2 = (a_4_5 + a_5_4);

assign add_ln77_9_fu_913_p2 = (add_ln77_8_fu_907_p2 + add_ln77_7_fu_901_p2);

assign add_ln77_fu_865_p2 = (a_7_5 + a_7_6);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign r_0_0 = mul_ln83_fu_1139_p2;

assign r_0_1 = mul_ln83_1_fu_1227_p2;

assign r_1_0 = mul_ln83_2_fu_1234_p2;

assign r_1_1 = mul_ln83_3_fu_1241_p2;

assign select_ln83_1_fu_1162_p3 = ((tmp_5_reg_1343[0:0] == 1'b1) ? sub_ln83_3_fu_1149_p2 : zext_ln83_3_fu_1158_p1);

assign select_ln83_2_fu_1189_p3 = ((tmp_6_reg_1358[0:0] == 1'b1) ? sub_ln83_5_fu_1176_p2 : zext_ln83_5_fu_1185_p1);

assign select_ln83_3_fu_1216_p3 = ((tmp_7_reg_1373[0:0] == 1'b1) ? sub_ln83_7_fu_1203_p2 : zext_ln83_7_fu_1212_p1);

assign select_ln83_fu_1128_p3 = ((tmp_4_reg_1328[0:0] == 1'b1) ? sub_ln83_1_fu_1115_p2 : zext_ln83_1_fu_1124_p1);

assign sext_ln83_10_fu_1209_p1 = $signed(trunc_ln83_s_reg_1383);

assign sext_ln83_1_fu_1121_p1 = $signed(trunc_ln83_2_reg_1338);

assign sext_ln83_2_fu_998_p1 = sum_0_1_fu_937_p2;

assign sext_ln83_4_fu_1036_p1 = sum_1_0_fu_946_p2;

assign sext_ln83_5_fu_1155_p1 = $signed(trunc_ln83_5_reg_1353);

assign sext_ln83_6_fu_1074_p1 = add_ln77_14_fu_955_p2;

assign sext_ln83_8_fu_1182_p1 = $signed(trunc_ln83_8_reg_1368);

assign sext_ln83_fu_960_p1 = sum_0_0_fu_928_p2;

assign sub_ln83_1_fu_1115_p2 = (6'd0 - zext_ln83_fu_1112_p1);

assign sub_ln83_2_fu_1010_p2 = ($signed(9'd0) - $signed(sext_ln83_2_fu_998_p1));

assign sub_ln83_3_fu_1149_p2 = (6'd0 - zext_ln83_2_fu_1146_p1);

assign sub_ln83_4_fu_1048_p2 = ($signed(9'd0) - $signed(sext_ln83_4_fu_1036_p1));

assign sub_ln83_5_fu_1176_p2 = (6'd0 - zext_ln83_4_fu_1173_p1);

assign sub_ln83_6_fu_1086_p2 = ($signed(9'd0) - $signed(sext_ln83_6_fu_1074_p1));

assign sub_ln83_7_fu_1203_p2 = (6'd0 - zext_ln83_6_fu_1200_p1);

assign sub_ln83_fu_972_p2 = ($signed(9'd0) - $signed(sext_ln83_fu_960_p1));

assign sum_0_0_fu_928_p2 = (add_ln59_13_reg_1278 + add_ln59_6_fu_924_p2);

assign sum_0_1_fu_937_p2 = (add_ln65_13_reg_1293 + add_ln65_6_fu_933_p2);

assign sum_1_0_fu_946_p2 = (add_ln71_13_reg_1308 + add_ln71_6_fu_942_p2);

assign zext_ln83_1_fu_1124_p1 = $unsigned(sext_ln83_1_fu_1121_p1);

assign zext_ln83_2_fu_1146_p1 = tmp_1_reg_1348;

assign zext_ln83_3_fu_1158_p1 = $unsigned(sext_ln83_5_fu_1155_p1);

assign zext_ln83_4_fu_1173_p1 = tmp_2_reg_1363;

assign zext_ln83_5_fu_1185_p1 = $unsigned(sext_ln83_8_fu_1182_p1);

assign zext_ln83_6_fu_1200_p1 = tmp_3_reg_1378;

assign zext_ln83_7_fu_1212_p1 = $unsigned(sext_ln83_10_fu_1209_p1);

assign zext_ln83_fu_1112_p1 = tmp_reg_1333;

endmodule //matrixmul
