-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_0_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_0_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_0_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_0_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_0_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_0_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_0_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_3_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_3_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_3_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_3_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_3_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_3_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_3_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_3_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_4_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_4_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_4_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_4_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_4_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_4_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_4_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_4_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_5_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_5_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_5_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_5_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_5_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_5_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_5_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_5_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_6_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_6_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_6_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_6_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_6_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_6_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_6_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_6_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_7_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_7_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_7_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_7_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_7_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_7_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_7_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_7_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    r_0_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_0_0_ap_vld : OUT STD_LOGIC;
    r_0_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_0_1_ap_vld : OUT STD_LOGIC;
    r_1_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_1_0_ap_vld : OUT STD_LOGIC;
    r_1_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_1_1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_matrixmul,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-csg325-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.900500,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=172,HLS_SYN_LUT=953,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln59_12_fu_628_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_12_reg_1248 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_12_fu_646_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_12_reg_1253 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_12_fu_664_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_12_reg_1258 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_12_fu_682_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_12_reg_1263 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_2_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_2_reg_1268 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln59_5_fu_718_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_5_reg_1273 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_13_fu_742_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_13_reg_1278 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_2_fu_759_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_2_reg_1283 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_5_fu_777_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_5_reg_1288 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_13_fu_801_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_13_reg_1293 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_2_fu_818_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_2_reg_1298 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_5_fu_836_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_5_reg_1303 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_13_fu_860_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_13_reg_1308 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_2_fu_877_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_2_reg_1313 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_5_fu_895_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_5_reg_1318 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_13_fu_919_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_13_reg_1323 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1328 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_reg_1333 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln83_2_reg_1338 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_reg_1343 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1348 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln83_5_reg_1353 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_reg_1358 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1363 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln83_8_reg_1368 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_reg_1373 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1378 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln83_s_reg_1383 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mul_ln83_fu_1139_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln83_1_fu_1227_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln83_2_fu_1234_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln83_3_fu_1241_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_11_fu_622_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_10_fu_616_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_11_fu_640_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_10_fu_634_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_11_fu_658_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_10_fu_652_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_11_fu_676_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_10_fu_670_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_1_fu_694_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_fu_688_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_4_fu_712_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_3_fu_706_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_8_fu_730_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_7_fu_724_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_9_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_1_fu_753_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_fu_747_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_4_fu_771_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_3_fu_765_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_8_fu_789_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_7_fu_783_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_9_fu_795_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_1_fu_812_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_fu_806_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_4_fu_830_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_3_fu_824_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_8_fu_848_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_7_fu_842_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_9_fu_854_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_1_fu_871_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_fu_865_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_4_fu_889_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_3_fu_883_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_8_fu_907_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_7_fu_901_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_9_fu_913_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_6_fu_924_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_6_fu_933_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_6_fu_942_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_6_fu_951_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_0_0_fu_928_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln83_fu_960_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln83_fu_972_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_0_1_fu_937_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln83_2_fu_998_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln83_2_fu_1010_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_1_0_fu_946_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln83_4_fu_1036_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln83_4_fu_1048_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln77_14_fu_955_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln83_6_fu_1074_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln83_6_fu_1086_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln83_fu_1112_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln83_1_fu_1121_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln83_1_fu_1115_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln83_1_fu_1124_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln83_fu_1128_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln83_2_fu_1146_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln83_5_fu_1155_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln83_3_fu_1149_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln83_3_fu_1158_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln83_1_fu_1162_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln83_4_fu_1173_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln83_8_fu_1182_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln83_5_fu_1176_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln83_5_fu_1185_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln83_2_fu_1189_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln83_6_fu_1200_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln83_10_fu_1209_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln83_7_fu_1203_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln83_7_fu_1212_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln83_3_fu_1216_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_mul_8s_6s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    mul_8s_6s_8_1_1_U1 : component matrixmul_mul_8s_6s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => b_0_0,
        din1 => select_ln83_fu_1128_p3,
        dout => mul_ln83_fu_1139_p2);

    mul_8s_6s_8_1_1_U2 : component matrixmul_mul_8s_6s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => b_0_1,
        din1 => select_ln83_1_fu_1162_p3,
        dout => mul_ln83_1_fu_1227_p2);

    mul_8s_6s_8_1_1_U3 : component matrixmul_mul_8s_6s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => b_1_0,
        din1 => select_ln83_2_fu_1189_p3,
        dout => mul_ln83_2_fu_1234_p2);

    mul_8s_6s_8_1_1_U4 : component matrixmul_mul_8s_6s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => b_1_1,
        din1 => select_ln83_3_fu_1216_p3,
        dout => mul_ln83_3_fu_1241_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln59_12_reg_1248 <= add_ln59_12_fu_628_p2;
                add_ln65_12_reg_1253 <= add_ln65_12_fu_646_p2;
                add_ln71_12_reg_1258 <= add_ln71_12_fu_664_p2;
                add_ln77_12_reg_1263 <= add_ln77_12_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln59_13_reg_1278 <= add_ln59_13_fu_742_p2;
                add_ln59_2_reg_1268 <= add_ln59_2_fu_700_p2;
                add_ln59_5_reg_1273 <= add_ln59_5_fu_718_p2;
                add_ln65_13_reg_1293 <= add_ln65_13_fu_801_p2;
                add_ln65_2_reg_1283 <= add_ln65_2_fu_759_p2;
                add_ln65_5_reg_1288 <= add_ln65_5_fu_777_p2;
                add_ln71_13_reg_1308 <= add_ln71_13_fu_860_p2;
                add_ln71_2_reg_1298 <= add_ln71_2_fu_818_p2;
                add_ln71_5_reg_1303 <= add_ln71_5_fu_836_p2;
                add_ln77_13_reg_1323 <= add_ln77_13_fu_919_p2;
                add_ln77_2_reg_1313 <= add_ln77_2_fu_877_p2;
                add_ln77_5_reg_1318 <= add_ln77_5_fu_895_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_1_reg_1348 <= sub_ln83_2_fu_1010_p2(8 downto 4);
                tmp_2_reg_1363 <= sub_ln83_4_fu_1048_p2(8 downto 4);
                tmp_3_reg_1378 <= sub_ln83_6_fu_1086_p2(8 downto 4);
                tmp_4_reg_1328 <= sum_0_0_fu_928_p2(7 downto 7);
                tmp_5_reg_1343 <= sum_0_1_fu_937_p2(7 downto 7);
                tmp_6_reg_1358 <= sum_1_0_fu_946_p2(7 downto 7);
                tmp_7_reg_1373 <= add_ln77_14_fu_955_p2(7 downto 7);
                tmp_reg_1333 <= sub_ln83_fu_972_p2(8 downto 4);
                trunc_ln83_2_reg_1338 <= sum_0_0_fu_928_p2(7 downto 4);
                trunc_ln83_5_reg_1353 <= sum_0_1_fu_937_p2(7 downto 4);
                trunc_ln83_8_reg_1368 <= sum_1_0_fu_946_p2(7 downto 4);
                trunc_ln83_s_reg_1383 <= add_ln77_14_fu_955_p2(7 downto 4);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln59_10_fu_616_p2 <= std_logic_vector(unsigned(a_1_0) + unsigned(a_1_3));
    add_ln59_11_fu_622_p2 <= std_logic_vector(unsigned(a_3_3) + unsigned(a_1_2));
    add_ln59_12_fu_628_p2 <= std_logic_vector(unsigned(add_ln59_11_fu_622_p2) + unsigned(add_ln59_10_fu_616_p2));
    add_ln59_13_fu_742_p2 <= std_logic_vector(unsigned(add_ln59_12_reg_1248) + unsigned(add_ln59_9_fu_736_p2));
    add_ln59_1_fu_694_p2 <= std_logic_vector(unsigned(a_3_0) + unsigned(a_2_1));
    add_ln59_2_fu_700_p2 <= std_logic_vector(unsigned(add_ln59_1_fu_694_p2) + unsigned(add_ln59_fu_688_p2));
    add_ln59_3_fu_706_p2 <= std_logic_vector(unsigned(a_2_0) + unsigned(a_2_3));
    add_ln59_4_fu_712_p2 <= std_logic_vector(unsigned(a_2_2) + unsigned(a_0_1));
    add_ln59_5_fu_718_p2 <= std_logic_vector(unsigned(add_ln59_4_fu_712_p2) + unsigned(add_ln59_3_fu_706_p2));
    add_ln59_6_fu_924_p2 <= std_logic_vector(unsigned(add_ln59_5_reg_1273) + unsigned(add_ln59_2_reg_1268));
    add_ln59_7_fu_724_p2 <= std_logic_vector(unsigned(a_0_0) + unsigned(a_0_3));
    add_ln59_8_fu_730_p2 <= std_logic_vector(unsigned(a_0_2) + unsigned(a_1_1));
    add_ln59_9_fu_736_p2 <= std_logic_vector(unsigned(add_ln59_8_fu_730_p2) + unsigned(add_ln59_7_fu_724_p2));
    add_ln59_fu_688_p2 <= std_logic_vector(unsigned(a_3_2) + unsigned(a_3_1));
    add_ln65_10_fu_634_p2 <= std_logic_vector(unsigned(a_1_4) + unsigned(a_1_7));
    add_ln65_11_fu_640_p2 <= std_logic_vector(unsigned(a_3_7) + unsigned(a_1_6));
    add_ln65_12_fu_646_p2 <= std_logic_vector(unsigned(add_ln65_11_fu_640_p2) + unsigned(add_ln65_10_fu_634_p2));
    add_ln65_13_fu_801_p2 <= std_logic_vector(unsigned(add_ln65_12_reg_1253) + unsigned(add_ln65_9_fu_795_p2));
    add_ln65_1_fu_753_p2 <= std_logic_vector(unsigned(a_3_4) + unsigned(a_2_5));
    add_ln65_2_fu_759_p2 <= std_logic_vector(unsigned(add_ln65_1_fu_753_p2) + unsigned(add_ln65_fu_747_p2));
    add_ln65_3_fu_765_p2 <= std_logic_vector(unsigned(a_2_4) + unsigned(a_2_7));
    add_ln65_4_fu_771_p2 <= std_logic_vector(unsigned(a_2_6) + unsigned(a_0_5));
    add_ln65_5_fu_777_p2 <= std_logic_vector(unsigned(add_ln65_4_fu_771_p2) + unsigned(add_ln65_3_fu_765_p2));
    add_ln65_6_fu_933_p2 <= std_logic_vector(unsigned(add_ln65_5_reg_1288) + unsigned(add_ln65_2_reg_1283));
    add_ln65_7_fu_783_p2 <= std_logic_vector(unsigned(a_0_4) + unsigned(a_0_7));
    add_ln65_8_fu_789_p2 <= std_logic_vector(unsigned(a_0_6) + unsigned(a_1_5));
    add_ln65_9_fu_795_p2 <= std_logic_vector(unsigned(add_ln65_8_fu_789_p2) + unsigned(add_ln65_7_fu_783_p2));
    add_ln65_fu_747_p2 <= std_logic_vector(unsigned(a_3_6) + unsigned(a_3_5));
    add_ln71_10_fu_652_p2 <= std_logic_vector(unsigned(a_5_0) + unsigned(a_5_3));
    add_ln71_11_fu_658_p2 <= std_logic_vector(unsigned(a_7_3) + unsigned(a_5_2));
    add_ln71_12_fu_664_p2 <= std_logic_vector(unsigned(add_ln71_11_fu_658_p2) + unsigned(add_ln71_10_fu_652_p2));
    add_ln71_13_fu_860_p2 <= std_logic_vector(unsigned(add_ln71_12_reg_1258) + unsigned(add_ln71_9_fu_854_p2));
    add_ln71_1_fu_812_p2 <= std_logic_vector(unsigned(a_7_0) + unsigned(a_6_1));
    add_ln71_2_fu_818_p2 <= std_logic_vector(unsigned(add_ln71_1_fu_812_p2) + unsigned(add_ln71_fu_806_p2));
    add_ln71_3_fu_824_p2 <= std_logic_vector(unsigned(a_6_0) + unsigned(a_6_3));
    add_ln71_4_fu_830_p2 <= std_logic_vector(unsigned(a_6_2) + unsigned(a_4_1));
    add_ln71_5_fu_836_p2 <= std_logic_vector(unsigned(add_ln71_4_fu_830_p2) + unsigned(add_ln71_3_fu_824_p2));
    add_ln71_6_fu_942_p2 <= std_logic_vector(unsigned(add_ln71_5_reg_1303) + unsigned(add_ln71_2_reg_1298));
    add_ln71_7_fu_842_p2 <= std_logic_vector(unsigned(a_4_0) + unsigned(a_4_3));
    add_ln71_8_fu_848_p2 <= std_logic_vector(unsigned(a_4_2) + unsigned(a_5_1));
    add_ln71_9_fu_854_p2 <= std_logic_vector(unsigned(add_ln71_8_fu_848_p2) + unsigned(add_ln71_7_fu_842_p2));
    add_ln71_fu_806_p2 <= std_logic_vector(unsigned(a_7_2) + unsigned(a_7_1));
    add_ln77_10_fu_670_p2 <= std_logic_vector(unsigned(a_4_7) + unsigned(a_5_6));
    add_ln77_11_fu_676_p2 <= std_logic_vector(unsigned(a_5_5) + unsigned(a_7_7));
    add_ln77_12_fu_682_p2 <= std_logic_vector(unsigned(add_ln77_11_fu_676_p2) + unsigned(add_ln77_10_fu_670_p2));
    add_ln77_13_fu_919_p2 <= std_logic_vector(unsigned(add_ln77_12_reg_1263) + unsigned(add_ln77_9_fu_913_p2));
    add_ln77_14_fu_955_p2 <= std_logic_vector(unsigned(add_ln77_13_reg_1323) + unsigned(add_ln77_6_fu_951_p2));
    add_ln77_1_fu_871_p2 <= std_logic_vector(unsigned(a_7_4) + unsigned(a_6_7));
    add_ln77_2_fu_877_p2 <= std_logic_vector(unsigned(add_ln77_1_fu_871_p2) + unsigned(add_ln77_fu_865_p2));
    add_ln77_3_fu_883_p2 <= std_logic_vector(unsigned(a_6_4) + unsigned(a_5_7));
    add_ln77_4_fu_889_p2 <= std_logic_vector(unsigned(a_6_6) + unsigned(a_6_5));
    add_ln77_5_fu_895_p2 <= std_logic_vector(unsigned(add_ln77_4_fu_889_p2) + unsigned(add_ln77_3_fu_883_p2));
    add_ln77_6_fu_951_p2 <= std_logic_vector(unsigned(add_ln77_5_reg_1318) + unsigned(add_ln77_2_reg_1313));
    add_ln77_7_fu_901_p2 <= std_logic_vector(unsigned(a_4_4) + unsigned(a_4_6));
    add_ln77_8_fu_907_p2 <= std_logic_vector(unsigned(a_4_5) + unsigned(a_5_4));
    add_ln77_9_fu_913_p2 <= std_logic_vector(unsigned(add_ln77_8_fu_907_p2) + unsigned(add_ln77_7_fu_901_p2));
    add_ln77_fu_865_p2 <= std_logic_vector(unsigned(a_7_5) + unsigned(a_7_6));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    r_0_0 <= mul_ln83_fu_1139_p2;

    r_0_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_0_0_ap_vld <= ap_const_logic_1;
        else 
            r_0_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_0_1 <= mul_ln83_1_fu_1227_p2;

    r_0_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_0_1_ap_vld <= ap_const_logic_1;
        else 
            r_0_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_1_0 <= mul_ln83_2_fu_1234_p2;

    r_1_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_1_0_ap_vld <= ap_const_logic_1;
        else 
            r_1_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_1_1 <= mul_ln83_3_fu_1241_p2;

    r_1_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_1_1_ap_vld <= ap_const_logic_1;
        else 
            r_1_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln83_1_fu_1162_p3 <= 
        sub_ln83_3_fu_1149_p2 when (tmp_5_reg_1343(0) = '1') else 
        zext_ln83_3_fu_1158_p1;
    select_ln83_2_fu_1189_p3 <= 
        sub_ln83_5_fu_1176_p2 when (tmp_6_reg_1358(0) = '1') else 
        zext_ln83_5_fu_1185_p1;
    select_ln83_3_fu_1216_p3 <= 
        sub_ln83_7_fu_1203_p2 when (tmp_7_reg_1373(0) = '1') else 
        zext_ln83_7_fu_1212_p1;
    select_ln83_fu_1128_p3 <= 
        sub_ln83_1_fu_1115_p2 when (tmp_4_reg_1328(0) = '1') else 
        zext_ln83_1_fu_1124_p1;
        sext_ln83_10_fu_1209_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln83_s_reg_1383),5));

        sext_ln83_1_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln83_2_reg_1338),5));

        sext_ln83_2_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_0_1_fu_937_p2),9));

        sext_ln83_4_fu_1036_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_1_0_fu_946_p2),9));

        sext_ln83_5_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln83_5_reg_1353),5));

        sext_ln83_6_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln77_14_fu_955_p2),9));

        sext_ln83_8_fu_1182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln83_8_reg_1368),5));

        sext_ln83_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_0_0_fu_928_p2),9));

    sub_ln83_1_fu_1115_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln83_fu_1112_p1));
    sub_ln83_2_fu_1010_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sext_ln83_2_fu_998_p1));
    sub_ln83_3_fu_1149_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln83_2_fu_1146_p1));
    sub_ln83_4_fu_1048_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sext_ln83_4_fu_1036_p1));
    sub_ln83_5_fu_1176_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln83_4_fu_1173_p1));
    sub_ln83_6_fu_1086_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sext_ln83_6_fu_1074_p1));
    sub_ln83_7_fu_1203_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln83_6_fu_1200_p1));
    sub_ln83_fu_972_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sext_ln83_fu_960_p1));
    sum_0_0_fu_928_p2 <= std_logic_vector(unsigned(add_ln59_13_reg_1278) + unsigned(add_ln59_6_fu_924_p2));
    sum_0_1_fu_937_p2 <= std_logic_vector(unsigned(add_ln65_13_reg_1293) + unsigned(add_ln65_6_fu_933_p2));
    sum_1_0_fu_946_p2 <= std_logic_vector(unsigned(add_ln71_13_reg_1308) + unsigned(add_ln71_6_fu_942_p2));
    zext_ln83_1_fu_1124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln83_1_fu_1121_p1),6));
    zext_ln83_2_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1348),6));
    zext_ln83_3_fu_1158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln83_5_fu_1155_p1),6));
    zext_ln83_4_fu_1173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1363),6));
    zext_ln83_5_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln83_8_fu_1182_p1),6));
    zext_ln83_6_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_1378),6));
    zext_ln83_7_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln83_10_fu_1209_p1),6));
    zext_ln83_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1333),6));
end behav;
